Imports: {
  import gate.relations.RelationSet;
  import java.util.Random;
  import static gate.Utils.*;
  import es.bsc.inb.ades.relation.extraction.util.*;
}
Phase:firstpass
Input: FINDING Sentence
Options: control = appelt

//Esta regla agarra todos los findings y luego por sentencia verifica los campos
Rule: rule_finding
({FINDING}): finding
-->
{ 
  
  AnnotationSet findings = (AnnotationSet) bindings.get("finding");
  System.out.println("**********************************************rule_finding_init************************************************************");
   
  Random rand = new Random();
  
  RelationSet relSet = inputAS.getRelations();
  
  for (Annotation finding : findings){
  	    int id = rand.nextInt(100000);
  	    //Integer id = FINDING_COUNTER.next();
  		String str_finding = stringFor(doc, finding);
  		System.out.println(str_finding);
  		AnnotationSet sentences = inputAS.get("Sentence", findings.firstNode().getOffset(), findings.lastNode().getOffset());
  		for (Annotation sentence : sentences){
	  		String str_sentence = stringFor(doc, sentence);
	  		System.out.println("Sentencia:");
	  		System.out.println(str_sentence);
	  		finding.getFeatures().put("ANNOTATION_TYPE","FINDING");
	  		doc.getAnnotations("TREATMENT_RELATED_FINDINGS").add(finding.getStartNode(), finding.getEndNode(), "FINDING_"+id, finding.getFeatures());
	  		AnnotationSet fields = inputAS.get(sentences.firstNode().getOffset(), sentences.lastNode().getOffset()); 
	  		for (Annotation annotation : fields){
			  	if(annotation.getType().equals("SPECIMEN") | annotation.getType().equals("SEX") |  
			  		annotation.getType().equals("MANIFESTATION_FINDING") | annotation.getType().equals("STUDY_DOMAIN") | 
			  		annotation.getType().equals("STUDY_TESTCD") | annotation.getType().equals("GROUP") |
			  		annotation.getType().equals("DOSE_QUANTITY") | annotation.getType().equals("DOSE_FREQUENCY") | 
			  		annotation.getType().equals("DOSE_DURATION") | annotation.getType().equals("STUDY_DAY_FINDING") | 
			  		annotation.getType().equals("TREATMENT_RELATED_TRIGGER") | annotation.getType().equals("NO_TREATMENT_RELATED_TRIGGER") | 
			  		annotation.getType().equals("MODE_OF_ACTION") | annotation.getType().equals("HEPATOTOXICITY") | 
			  		annotation.getType().equals("CYPS") | annotation.getType().equals("ROUTE_OF_ADMINISTRATION") |
			  		annotation.getType().equals("RISK_LEVEL")
			  		){
			  			relSet.addRelation("FINDING-"+annotation.getType(), new int[] {finding.getId(), annotation.getId()});
			  			System.out.println(annotation.getType() + "|" + annotation.getStartNode().getOffset() + "|" + annotation.getEndNode().getOffset() + "|" +  stringFor(doc, annotation));
			  			annotation.getFeatures().put("ANNOTATION_TYPE",annotation.getType());
			  			doc.getAnnotations("TREATMENT_RELATED_FINDINGS").add(annotation.getStartNode(), annotation.getEndNode(), "FINDING_"+id, annotation.getFeatures());
			  			//outputAS.add(annotation.getStartNode(), annotation.getEndNode(), "Z_FINDING_FIELDS_"+id, annotation.getFeatures());
			  		}
			}
	  	}	
  }
  System.out.println("**********************************************rule_finding_end************************************************************");
}
