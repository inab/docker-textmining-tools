Imports: {
import static gate.Utils.*;
}
Phase:firstphase
Input: Lookup
Options: control = appelt

Rule: cdisc_study_testcd_mapping
(
{Lookup.minorType=="SEND_CIDSC"}
)
:lookup
-->
{
	gate.AnnotationSet lookup = (gate.AnnotationSet) bindings.get("lookup");
 	gate.Annotation ann = (gate.Annotation) lookup.iterator().next();
 	FeatureMap lookupFeatures = ann.getFeatures();
 	String label = lookupFeatures.get("LABEL").toString();
 	String content = stringFor(doc, ann);
 	if(label.contains("PKPARMCD_") || label.contains("PKPARM_") || label.endsWith("TEST NAME") || label.endsWith("TEST CODE")){
	 	gate.FeatureMap features = Factory.newFeatureMap();
	 	features.put("text",content);
	 	features.put("SOURCE","CDISC");
	 	features.put("RULE","CDISC_STUDY_TESTCD_RULE");
	 	features.putAll(lookupFeatures);
	 	features.remove("majorType");
 		features.remove("minorType");
 		features.remove("INTERNAL_CODE");
 		if(label.endsWith("TEST CODE")) {
	 		if(!label.contains("STSPRM")){
	 			try{
		   			outputAS.add(lookup.firstNode().getOffset(),lookup.lastNode().getOffset(), "STUDY_TESTCD", features);
		 			if(
				 		label.contains("BGTEST") ||  
				 		label.contains("BWTEST") ||
				 		label.contains("DDTEST") ||
				 		label.contains("EGTEST") ||
				 		label.contains("FMTEST") ||
				 		label.contains("FXTEST") ||
				 		label.contains("FWTEST") ||
				 		label.contains("BWTEST") ||
				 		label.contains("MATEST") ||
				 		label.contains("OMTEST") ||
				 		label.contains("PYTEST") ||
				 		label.contains("SCVTST") ||
				 		label.contains("MITEST") ||
				 		label.contains("SRETST") ||
				 		label.contains("TFTEST") ||
				 		label.contains("VSTEST")
			 		) 
			 		{
				 		try{
				   			outputAS.add(lookup.firstNode().getOffset(),lookup.lastNode().getOffset(), "STUDY_DOMAIN", features);
				 		}catch(InvalidOffsetException e){
				   			throw new LuckyException(e);
				 		}
		 			}
		 		}catch(InvalidOffsetException e){
		   			throw new LuckyException(e);
		 		}
	 		}
	 	}else {
	 		try{
				outputAS.add(lookup.firstNode().getOffset(),lookup.lastNode().getOffset(), "STUDY_TESTCD", features);
			}catch(InvalidOffsetException e){
				throw new LuckyException(e);
			}
	 	}
	 	//remove old lookup
	 	inputAS.remove(ann);
	 }else{
	 	//System.out.println(" Not a domain : " + label + " term : " + content);
	 }
}